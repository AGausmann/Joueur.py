# Generated by Creer at 03:31PM on April 06, 2016 UTC, git hash: 'e7ec4e35c89d7556b9e07d4331ac34052ac011bd'
# This is a simple class to represent the Spiderling object in the game. You can extend it by adding utility functions here in this file.

from games.spiders.spider import Spider

# <<-- Creer-Merge: imports -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
# you can add addtional import(s) here
# <<-- /Creer-Merge: imports -->>

class Spiderling(Spider):
    """The class representing the Spiderling in the Spiders game.

    A Spider spawned by the BroodMother.
    """

    def __init__(self):
        """Initializes a Spiderling with basic logic as provided by the Creer code generator."""
        Spider.__init__(self)

        # private attributes to hold the properties so they appear read only
        self._busy = False
        self._damage = 0
        self._moving_on_web = None
        self._moving_to_nest = None
        self._speed = 0
        self._turns_remaining = 0
        self._weight = 0



    @property
    def busy(self):
        """When empty string this Spiderling is not busy, and can act. Otherwise a string representing what it is busy with, e.g. 'Moving', 'Attacking'.

        :rtype: bool
        """
        return self._busy


    @property
    def damage(self):
        """How much damage this Spiderling does to the BroodMother.

        :rtype: int
        """
        return self._damage


    @property
    def moving_on_web(self):
        """The Web this Spiderling is using to move. Null if it is not moving.

        :rtype: Web
        """
        return self._moving_on_web


    @property
    def moving_to_nest(self):
        """The Nest this Spiderling is moving to. Null if it is not moving.

        :rtype: Nest
        """
        return self._moving_to_nest


    @property
    def speed(self):
        """How much distance this Spiderling covers per turn when moving across Webs.

        :rtype: float
        """
        return self._speed


    @property
    def turns_remaining(self):
        """The number of turns remaining for this Spiderling's current task.

        :rtype: int
        """
        return self._turns_remaining


    @property
    def weight(self):
        """How heavy this spider is. Webs it moves across must have enough strength to support it in addition to existing Spiderlings.

        :rtype: int
        """
        return self._weight



    def attack(self, spiderling):
        """ Attacks another Spiderling

        Args:
            spiderling (Spiderling): The Spiderling to attack.

        Returns:
            bool: True if the attack was successful, false otherwise.
        """
        return self._run_on_server('attack', spiderling=spiderling)


    def move(self, web):
        """ Starts moving the Spiderling across a Web to another Nest.

        Args:
            web (Web): The Web you want to move across to the other Nest.

        Returns:
            bool: True if the move was successful, false otherwise.
        """
        return self._run_on_server('move', web=web)


    # <<-- Creer-Merge: functions -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
    # if you want to add any client side logic (such as state checking functions) this is where you can add them
    # <<-- /Creer-Merge: functions -->>
